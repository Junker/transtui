#!/usr/bin/env gosh

(use scheme.show)
(use scheme.show.color)
(use scheme.list)
(use srfi-13)
(use srfi-1)
(use rfc.json)
(use rfc.http)
(use gauche.process)
(use gauche.parseopt)

(define *server*) ; mozhi server
(define *engine*)
(define *from*)
(define *to*)
(define *debug*)
(define *last-text* "")
(define *last-translated-text* "")

(define (print-prompt)
  (show #t (as-blue "<trans")
        " (" (as-magenta *engine*) ") "
        (as-green *from*) ":" (as-green *to*)
        (as-blue "> ")))

(define (print-http-debug code body)
  (show #t (as-red "HTTP Code: " code nl body nl)))

(define (print-exn exn)
  (show #t (as-red "Exception: " exn nl)))

(define (moizhi-get uri)
  (guard (exn
          (#t
           (print-exn exn)
           (values #f "")))
    (receive (code headers body)
        (http-get *server* uri
                  :secure #t)
      (when (or *debug* (string<> code "200"))
        (print-http-debug code body))
      (values (string=? code "200") body))))

(define (translate text :key to from engine)
  (receive (res body)
      (moizhi-get (http-compose-query "/api/translate"
                                      `((engine ,engine)
                                        (from ,from)
                                        (to ,to)
                                        (text ,(regexp-replace #/\\n/ text "\n")))))
    (and res
         (parse-json-string body))))

(define (trans text)
  (set! *last-text* text)
  (if-let1 translation (translate text
                                  :from *from*
                                  :to *to*
                                  :engine *engine*)
    (if (string=? *engine* "all")
        (vector-for-each (lambda (item)
                           (set! *last-translated-text*
                             (assoc-ref item "translated-text"))
                           (show #t (as-green (assoc-ref item "engine") ": ")
                                 *last-translated-text* nl))
                         translation)
        (begin
          (set! *last-translated-text*
            (assoc-ref translation "translated-text"))
          (show #t *last-translated-text* nl)))
    #f))

(define (copy-clipboard)
  (call-with-output-process
   "xclip -selection clipboard"
	 (lambda (out) (display *last-translated-text* out))))


(define (print-help)
  (let1 %print-item (lambda (arg descr)
                      (show #t (fitted/right 12 arg) descr nl))
    (show #t "Usage: transtui [options]" nl)
    (%print-item "--from" "from language (e.g. 'en')")
    (%print-item "--to" "to language (e.g. 'en')")
    (%print-item "--engine" "translation engine (e.g. google,yandex etc)")
    (%print-item "--text" "text to translate")
    (%print-item "--server" "mozhi server (e.g. 'mozhi.aryak.me')")
    (%print-item "--debug" "enable debug output")))

(define (parse-args args)
  (let-args (cdr args)
    ((%help "h|help")
     (%text "text=s")
     (%to "to=s" "en")
     (%from "from=s" "auto")
     (%engine "engine=s" "google")
     (%server "server=s" "mozhi.aryak.me")
     (%debug "debug")
     . restargs)
    (when %help
      (print-help)
      (exit))
    (set! *from* %from)
    (set! *to* %to)
    (set! *engine* %engine)
    (set! *server* %server)
    (set! *debug* %debug)
    (when %text
      (print-prompt)
      (show #t %text nl)
      (trans %text))))

(define (print-commands)
  (let1 %print-command (lambda (cmd descr)
                         (show #t (as-green (fitted/right 14 cmd))
                               descr nl))
    (%print-command ".from" "from language (e.g. '.from en')")
    (%print-command ".to" "to language (e.g. '.to de')")
    (%print-command ".engine" "translation engine (e.g. '.engine google')")
    (%print-command ".copy" "copy last translated text to clipboard")
    (%print-command ".redo" "repeat translation")
    (%print-command ".engines" "print list of engines supported by Mozhi server")
    (%print-command ".from-list" "print list of available source languages for engine")
    (%print-command ".to-list" "print list of available target languages for engine")
    (%print-command ".quit" "Quit program")))

(define (print-engines)
  (receive (res body)
      (moizhi-get "/api/engines")
    (and res
         (map (lambda (item)
                (show #t (as-green (fitted/right 14 (car item)))
                      (cdr item) nl))
              (parse-json-string body)))))

(define (print-from-list)
  (receive (res body)
      (moizhi-get (http-compose-query "/api/source_languages"
                                      `((engine ,*engine*))))
    (and res
         (map (lambda (item)
                (show #t (as-green (fitted/right 14 (assoc-ref item "Id")))
                      (assoc-ref item "Name") nl))
              (vector->list (parse-json-string body))))))

(define (print-to-list)
  (receive (res body)
      (moizhi-get (http-compose-query "/api/target_languages"
                                      `((engine ,*engine*))))
    (and res
         (map (lambda (item)
                (show #t (as-green (fitted/right 14 (assoc-ref item "Id")))
                      (assoc-ref item "Name") nl))
              (vector->list (parse-json-string body))))))

(define (print-hints)
  (show #t (as-bold "Hint: ") "Print '.help' for help..." nl))

(define (interruptible-read-line)
  (let loop ()
    (guard (exn
            ('unhandled-signal-error
             (begin
               (newline)
               (print-prompt)
               (loop))))
      (read-line))))

;; == MAIN
(define (main args)
  (parse-args args)
  (when (string=? *last-text* "")
    (print-hints))
  (print-prompt)
  (let loop ()
    (let* ((text (interruptible-read-line))
           (text (if (string? text)
                     (string-trim-both text)
                     text)))
      (cond ((or (eof-object? text)
                 (string=? ".quit" text)
                 (string=? ".exit" text))
             (exit))
            ((string=? text "")
             (newline))
            ((string=? ".engines" text)
             (print-engines))
            ((string=? ".to-list" text)
             (print-to-list))
            ((string=? ".from-list" text)
             (print-from-list))
            ((string-prefix? ".from " text)
             (set! *from* (string-drop text 6)))
            ((string-prefix? ".to " text)
             (set! *to* (string-drop text 4)))
            ((string-prefix? ".engine " text)
             (set! *engine* (string-drop text 8)))
            ((string=? ".copy" text)
             (copy-clipboard))
            ((string=? ".redo" text)
             (trans *last-text*))
            ((or (string=? ".commands" text)
                 (string=? ".help" text))
             (print-commands))
            (else
             (trans text))))
    (print-prompt)
    (loop)))
